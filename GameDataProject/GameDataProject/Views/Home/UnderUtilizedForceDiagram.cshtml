@model  UnderUtilizedPeopleModel
@using GameDataProject.Models
@{
    ViewBag.Title = "Under Utilized People";
    
    System.Web.Script.Serialization.JavaScriptSerializer jss = new System.Web.Script.Serialization.JavaScriptSerializer ();

}
<!DOCTYPE html>
<html>
<head>
</head>
<style>

.link {
  stroke: #ccc;
}

.node text {
  pointer-events: none;
  font: 10px sans-serif;
}

</style>
<body>
    <select id="GameSelect" ></select>
    <select id="TeamSelect" ></select>
    <input type="checkbox" id="CompletionRate" />
    <input type="checkbox" id="ThrowsAndCatches" />
    <input type="checkbox" id="ThrowNumbers" />
    <input type="checkbox" id="ThrowDist" />
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>
    var Data = '';
    var GameData = '';

    var width = 1060,
        height = 700

    var color = d3.scale.category20();

    var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height);

    var force;

    function changeDiagram() {
        var game = $('#GameSelect').val();
        var team = $('#TeamSelect').val();
        var comRateChk = $('#CompletionRate').val();
        var throwsCatchesChk = $('#ThrowsAndCatches').val();
        var throwNumChk = $('#ThrowNumbers').val();
        var throwDistChk = $('#ThrowDist').val();

        GameData = Data[game][team];

        force = d3.layout.force()
        .gravity(.001)
        .distance(100)
        .charge(-100)
        //.theta(2);
        .size([width, height]);


        force
            .nodes(GameData.Names)
            .links(GameData.Passes)
            .linkDistance(function (link, idx) {
                if (throwDistChk)
                    return (1 - (link.throwDist / 20)) * 300
                else
                    return 100;
            })
            .start();

        var link = svg.selectAll(".link")
            .data(GameData.Passes)
          .enter().append("line")
            .attr("class", "link")
            .style("stroke-width", function (d) {
                if (throwNumChk)
                    return Math.sqrt(d.numThrows);
                else
                    return 5;
            });

        var node = svg.selectAll(".node")
            .data(GameData.Names)
            .enter().append("circle")
            .attr("class", "node")
            .attr("r", function (d) { return d.compRate; })
            .style("fill", function (d) { return color(d.numThrowsCatches); })
            .call(force.drag);

        node.append("image")
        .attr("xlink:href", "https://github.com/favicon.ico")
        .attr("x", -8)
        .attr("y", -8)
        .attr("width", 16)
        .attr("height", 16);

        node.append("text")
            .attr("dx", 12)
            .attr("dy", ".35em")
            .text(function (d) { return d.name });

        force.on("tick", function () {
            link.attr("x1", function (d) { return d.source.x; })
                .attr("y1", function (d) { return d.source.y; })
                .attr("x2", function (d) { return d.target.x; })
                .attr("y2", function (d) { return d.target.y; });

            node.attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });
        });
    }

</script>
</body>
</html>
